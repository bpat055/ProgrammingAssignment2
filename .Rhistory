cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
x <- c(2,3,4,5,6,7,8,9)
cachemean(x)
makeVector()
x <- makeVector()
x$set()
cachemean(x)
x
x$get()
x <- makeVector(c(2,3,4,5,6))
x
x$get()
cachemean(x)
x$getmean()
cachemean(4)
x$set(c(1,1,1,1,2,2,2,2))
cachemean(x)
cachemean(x)
View(makeVector)
x <- matrix(c(2,3,4,3),2,2)
x
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() inv
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinverse()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinverse(inv)
inv
}
x <- makeCacheMatrix(x)
cacheSolve(x)
solve.default
x
cacheSolve(x)
makeCacheMatrix(as.matrix(c(1,0,1,0)))
x$get()
x$get
x$get()
